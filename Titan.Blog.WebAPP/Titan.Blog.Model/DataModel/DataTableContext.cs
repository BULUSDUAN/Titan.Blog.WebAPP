
/************************************************************************
 * FileName  DataTable\DataTableContextInfrastructure.IAg
 * FileDesc data/context
 * Author   System
 * CreateTime 2018-08-29 17:44:04

 * Copyright (c) Socool 2017. All Rights Reserved. 
 * ***********************************************************************/

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5

using System.Linq;

#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning
namespace Titan.Model.DataModel
{
    using Microsoft.EntityFrameworkCore;
    using System;
    using System.Reflection;


    public partial class ModelBaseContext : DbContext
    {
        public ModelBaseContext(DbContextOptions options) : base(options)
        {

        }

        public virtual DbSet<Author> SysCompany { get; set; } // SysCompany

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //使用sql server数据库
            //optionsBuilder.UseSqlServer("Data Source=192.168.0.207,1433;Initial Catalog=db_csdn_wx;User ID=hkuser;Password=csdn2018")

            //使用mysql 数据库
            optionsBuilder.UseSqlServer("Data Source=112.74.51.95;Initial Catalog=TestDB;User ID=sa;Password=Hanhongwei123!;MultipleActiveResultSets=true");
        }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            //将实现了IEntityTypeConfiguration<Entity>接口的模型配置类加入到modelBuilder中，进行注册
            var typesToRegister = Assembly.GetExecutingAssembly().GetTypes().Where(q => q.GetInterface(typeof(IEntityTypeConfiguration<>).FullName) != null);
            foreach (var type in typesToRegister)
            {
                dynamic configurationInstance = Activator.CreateInstance(type);
                modelBuilder.ApplyConfiguration(configurationInstance);
            }
        }
    }
}
// </auto-generated>
